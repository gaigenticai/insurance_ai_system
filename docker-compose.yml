"""
Docker Compose configuration for the Insurance AI System.
Sets up all required services for local development and testing.
"""

version: '3.8'

services:
  # API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: api
    ports:
      - "8080:8080"
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=insurance_ai
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - DB_SCHEMA=insurance_ai
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - REDIS_DB=0
      - API_PORT=8080
      - ALLOWED_ORIGINS=*
    depends_on:
      - postgres
      - redis
    volumes:
      - ./config:/app/config
    command: ["python", "api.py"]
    restart: unless-stopped

  # Celery Worker
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: worker
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=insurance_ai
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - DB_SCHEMA=insurance_ai
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - REDIS_DB=0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - postgres
      - redis
    volumes:
      - ./config:/app/config
    command: ["celery", "-A", "celery_app", "worker", "--loglevel=info"]
    restart: unless-stopped

  # Celery Beat (for scheduled tasks)
  beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: worker
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=insurance_ai
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - DB_SCHEMA=insurance_ai
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - REDIS_DB=0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - postgres
      - redis
      - worker
    volumes:
      - ./config:/app/config
    command: ["celery", "-A", "celery_app", "beat", "--loglevel=info"]
    restart: unless-stopped

  # Event Listener
  event_listener:
    build:
      context: .
      dockerfile: Dockerfile
      target: worker
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=insurance_ai
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - DB_SCHEMA=insurance_ai
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - REDIS_DB=0
    depends_on:
      - postgres
      - redis
    volumes:
      - ./config:/app/config
    command: ["python", "event_listener.py"]
    restart: unless-stopped

  # Streamlit UI
  ui:
    build:
      context: .
      dockerfile: Dockerfile
      target: ui
    ports:
      - "8501:8501"
    environment:
      - API_URL=http://api:8080
    depends_on:
      - api
    volumes:
      - ./config:/app/config
    command: ["streamlit", "run", "ui/streamlit_app.py"]
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=insurance_ai
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped

  # Redis for Celery broker and result backend
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
